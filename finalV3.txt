#include <msp430.h>


/**
 * main.c
 */
// uart/state machine variables
volatile unsigned int state = 0;
volatile unsigned int output_state = 0;
volatile unsigned int t_val = 0;
volatile unsigned int p_val = 0;
volatile unsigned int rh_val = 0;
// light modes. auto = a, sunny = s, rainy = s, snowy = n, stormy = t
volatile unsigned char mode = 'a';


// condition checking variables
//heat gun 1 inch from thermistor, lowest setting (45C) = 140
//heat gun 1 inch from thermistor, high end label aligned with top = 220
//lab room temp ~18C = 83
//need to identify these temperatures

unsigned int temp0 = 60;
unsigned int temp1 = 110;
unsigned int temp2 = 160;

// covered with two hands <30
// covered with one hand some distance from photoresistor = 100
// exposed to phone light > 200
// need to identify these lights
unsigned int light0 = 50;
unsigned int light1 = 140;


// exposed to lab air = 72
// touch and hold with finger = 140
// touched to wet towel = 180
// need to identify these rh
unsigned int rh0 = 100;
unsigned int rh1 = 160;

// a value corresponding to type of weather produced
unsigned int weatherType = 0; // sunny = 0; cloudy = 1; Rainy = 2; snowy = 3; stormy = 4

int main(void)
{
      WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

      // Configure SMCLK = 1MHz
      CSCTL0_H = 0xA5;
      CSCTL1 |= DCOFSEL_3;                       // Set max. DCO setting 8MHz
      CSCTL2 |= SELA_3 + SELS_3 + SELM_3;        // set ACLK = SMCLK = DCO
      CSCTL3 |= DIVM__2 + DIVA__1 + DIVS__2;     // SMCLK = 1MHz

      // configure accelerometer outputs, as shown in exp board guide schematic. p1.0 is a0, p1.1 is a0, p1.2 is a2
      P1SEL0 |= BIT0 + BIT1 + BIT2;
      P1SEL1 |= BIT0 + BIT1 + BIT2;

      // configure adc10
      ADC10CTL0 &= ~ADC10ENC; //enable modifications to control bits
      ADC10CTL0 |= ADC10ON; //turn on adc
      ADC10CTL1 |= ADC10SHS_0 + ADC10SHP + ADC10SSEL_3; // select ADC10SC bit as sample source (default), SAMPCON sourced from sampling timer, uses SMCLK
      ADC10CTL2 |= ADC10RES; //10 bit resolution output

      ADC10MCTL0 |= ADC10SREF_0 + ADC10INCH_0; //vr+ = avcc, vr1 = avss, initially select a0 as input channel

      // set up timer to up mode and reset to make 25Hz square wave
      TB1CTL |= TBSSEL_2 + MC_1 + ID__8 + TBCLR; // SMCLK, UP mode, divide clock to 1MHz, clear count
      TB1CCR0 = 40000-1;    // 125k/25000 = 5Hz
      TB1CCTL1 |= OUTMOD_7 + CCIE; // Compare mode (default, not included in code), enable interrupt, reset/set
      TB1CCR1 = 20000;


      // Configure ports for UCA0 p2.0 is tx and p2.1 is rx
      P2SEL0 &= ~(BIT0 + BIT1);
      P2SEL1 |= BIT0 + BIT1;

      // Configure UART
      UCA0CTLW0 |= UCSSEL0;
      UCA0MCTLW = UCOS16 + UCBRF0 + 0x4900;
      UCA0BRW = 52;
      UCA0CTLW0 &= ~UCSWRST;
      UCA0IE |= UCRXIE; //enable UART receive interrupt

      // set up test LEDs
      PJDIR |= BIT0 + BIT1 + BIT2 + BIT3;
      PJSEL0 &= ~(BIT0 + BIT1 + BIT2 + BIT3);
      PJSEL1 &= ~(BIT0 + BIT1 + BIT2 + BIT3);


      P3DIR |= BIT4 + BIT5 + BIT6 + BIT7;
      P3SEL0 &= ~(BIT4 + BIT5 + BIT6 + BIT7);
      P3SEL1 &= ~(BIT4 + BIT5 + BIT6 + BIT7);

      // set up protoboard LEDs (gate voltages to BJTs)
      P1DIR |= BIT3 + BIT4 + BIT5;
      P1SEL0 &= ~(BIT3 + BIT4 + BIT5);
      P1SEL1 &= ~(BIT3 + BIT4 + BIT5);
      P1OUT &= ~(BIT3 + BIT4 + BIT5); // initialize to off

      P3DIR |= BIT3;
      P3SEL0 &= BIT3;
      P3SEL1 &= BIT3;

      P4DIR |= BIT0;
      P4SEL0 &= BIT0;
      P4SEL1 &= BIT0;
      _EINT();

      // enable adc for use and start conversion
      ADC10CTL0 |= ADC10ENC + ADC10SC;


      while(1);
      return 0;
}

#pragma vector = USCI_A0_VECTOR
__interrupt void USCI_A0_ISR(void)
{
    mode = UCA0RXBUF;
}

#pragma vector = TIMER1_B1_VECTOR
__interrupt void Timer_B1_ISR (void)
{
   if (mode == 'a'){

    switch(state)
            {
            case 0:
                ADC10CTL0 &= ~(ADC10ENC + ADC10SC);

                //change input
                ADC10MCTL0 &= ~ADC10INCH_2;
                ADC10MCTL0 |= ADC10INCH_0;

                //reactivate
                ADC10CTL0 |= ADC10ENC + ADC10SC;

                //wait and take measurement
                while (ADC10CTL1 & ADC10BUSY);
                p_val = ADC10MEM0 >> 2;

                if (p_val >= 255){
                    p_val = 254;
                }
                state = 1;
                break;
            case 1:
                ADC10CTL0 &= ~(ADC10ENC + ADC10SC);

                ADC10MCTL0 &= ~ADC10INCH_0;
                ADC10MCTL0 |= ADC10INCH_1;

                ADC10CTL0 |= ADC10ENC + ADC10SC;

                while (ADC10CTL1 & ADC10BUSY);
                t_val = ADC10MEM0 >> 2;

                if (t_val >= 255){
                    t_val = 254;
                }

                state = 2;
            case 2:

                ADC10CTL0 &= ~(ADC10ENC + ADC10SC);

                ADC10MCTL0 &= ~ADC10INCH_1;
                ADC10MCTL0 |= ADC10INCH_2;

                ADC10CTL0 |= ADC10ENC + ADC10SC;

                while (ADC10CTL1 & ADC10BUSY);
                rh_val = ADC10MEM0 >> 2;

                if (rh_val >= 255){
                    rh_val = 254;
                }
                state = 0;
            }

    switch(output_state)
    {
    case 0:
        while (!(UCA0IFG & UCTXIFG));
        UCA0TXBUF = 255;
        output_state = 1;
        break;
    case 1:
        while (!(UCA0IFG & UCTXIFG));
        UCA0TXBUF = p_val;
        output_state = 2;
        break;
    case 2:
        while (!(UCA0IFG & UCTXIFG));
        UCA0TXBUF = t_val;
        output_state = 3;
        break;
    case 3:
        while (!(UCA0IFG & UCTXIFG));
        UCA0TXBUF = rh_val;
        output_state = 4;
        break;
    case 4:
        while (!(UCA0IFG & UCTXIFG));
        UCA0TXBUF = weatherType;
        output_state = 0;
        break;
    }

    /*
unsigned int temp0 = 60;
unsigned int temp1 = 110;
unsigned int temp2 = 160;

// covered with two hands <30
// covered with one hand some distance from photoresistor = 100
// exposed to phone light > 200
// need to identify these lights
unsigned int light0 = 50;
unsigned int light1 = 140;


// exposed to lab air = 72
// touch and hold with finger = 140
// touched to wet towel = 180
// need to identify these rh
unsigned int rh0 = 100;
unsigned int rh1 = 160;
     */

 /* sunny -> keep light exposed, use heat gun close to temp resistor
  * cloudy -> shadow light, add finger to rh sensor
  * rainy -> shadow light, add moist towel to rh sensor
  * snowy -> shadow light, submerge thermistor in ice
  * stormy -> completely dark, add moist towel to rh sensor
  */
    // determine type of weather. Combination of conditions should be mutually exclusive.
    if (p_val > light1 && t_val >= temp2 && rh_val < rh0){
        weatherType = 1; // sunny
    }
    else if (p_val > light0 && p_val < light1 && t_val > temp0 && t_val <= temp1 && rh_val > rh0 && rh_val <= rh1){
        weatherType = 2; // cloudy
    }
    else if (p_val > light0 && p_val < light1 && t_val > temp0 && t_val <= temp1 && rh_val > rh1){
        weatherType = 3; // rainy
    }
    else if (p_val > light0 && p_val < light1 && t_val <= temp0 &&  rh_val <= rh1){
        weatherType = 4; // snowy
    }
    else if (p_val < light0 && t_val > temp0 && t_val <= temp1 && rh_val > rh1 ){
        weatherType = 5; // stormy
    }
    else{
        weatherType = 0; // default
    }
   }

   // these conditions set the weather type based on user input
   else if (mode == 's'){
       weatherType = 1;
   }
   else if (mode == 'c'){
       weatherType = 2;
   }
   else if (mode == 'r'){
       weatherType = 3;
   }
   else if (mode == 'n'){
       weatherType = 4;
   }
   else if (mode == 't'){
       weatherType = 5;
   }

   // this set of conditions alters the LEDs.
   switch(weatherType){
   case 1: // sunny
       PJOUT = BIT0;
       P3OUT = 0;

       P1OUT |= BIT3; P1OUT &= ~(BIT4 + BIT5); P3OUT &= ~BIT3; P4OUT &= ~BIT0;
       break;
   case 2: // cloudy
       PJOUT = BIT1;
       P3OUT = 0;

       P1OUT |= BIT4; P1OUT &= ~(BIT3 + BIT5); P3OUT &= ~BIT3; P4OUT &= ~BIT0;
       break;
   case 3: // rainy
       PJOUT = BIT2;
       P3OUT = 0;

       P1OUT |= BIT5; P1OUT &= ~(BIT3 + BIT4); P3OUT &= ~BIT3; P4OUT &= ~BIT0;
       break;
   case 4: // snowy
       PJOUT = BIT3;
       P3OUT = 0;

       P4OUT |= BIT0; P1OUT &= ~(BIT3 + BIT4 + BIT5); P3OUT &= ~BIT3;
       break;
   case 5: // stormy
       PJOUT = 0;
       P3OUT = BIT4;

       P3OUT |= BIT3; P1OUT &= ~(BIT4 + BIT5); P4OUT &= ~BIT0;
       break;
   default:
       PJOUT = 0;
       P3OUT = 0;

       P1OUT &= ~(BIT3 + BIT4 + BIT5);
       break;
   }

    TB1CCTL1 &= ~CCIFG;

}




